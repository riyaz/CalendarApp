

workflows:
    ios-project-debug:
      name: iOS debug
      environment:
        groups:
        # Add the group environment variables in Codemagic UI (either in Application/Team variables) - https://docs.codemagic.io/variables/environment-variable-groups/
          - test # <-- (Includes FCI_CERTIFICATE, FCI_CERTIFICATE_PASSWORD, FCI_PROVISIONING_PROFILE)
#          - app_store_credentials # <-- (Includes APP_STORE_CONNECT_ISSUER_ID, APP_STORE_CONNECT_KEY_IDENTIFIER, APP_STORE_CONNECT_PRIVATE_KEY)
            # APP_STORE_CONNECT_ISSUER_ID <-- Put your App Store Connect Issuer Id here
            # APP_STORE_CONNECT_KEY_IDENTIFIER <-- Put your App Store Connect Key Identifier here
            # APP_STORE_CONNECT_PRIVATE_KEY <-- Put your App Store Connect Private Key here
            # See the following link for more details - https://docs.codemagic.io/code-signing-yaml/signing-ios/
            # https://appstoreconnect.apple.com/access/api
#          - other
        vars:
          XCODE_WORKSPACE: "Calendar.xcodeproj" # <-- Put the name of your workspace here.
          XCODE_SCHEME: "Calendar" # <-- Put the name of your scheme here.
#          APP_STORE_APP_ID: 1555555551 # <-- Put the app id number here. This is found in App Store Connect > App > General > App Information
          CM_CERTIFICATE: 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 # <-- Put your encrypted distribution certificate here.
          CM_CERTIFICATE_PASSWORD: ZHJlYW1wbHVnQGNyZWQ= # <-- Put your encrypted distribution certificate password here.
          CM_PROVISIONING_PROFILE:  # <-- Put your encrypted provisioning profile here.
        xcode: latest
        cocoapods: default
      triggering:
        events:
          - push
          - tag
          - pull_request
        branch_patterns:
          - pattern: 'develop'
            include: true
            source: true
      scripts:
        - name: Initialize keychain to be used for codesigning using Codemagic CLI 'keychain' command
          script: |
            keychain initialize
        - name: set up provisioning profiles
          script: |
            PROFILES_HOME="$HOME/Library/MobileDevice/Provisioning Profiles"
            mkdir -p "$PROFILES_HOME"
            echo "PROFILE BELOW"
            echo "${FCI_PROVISIONING_PROFILE}"
            PROFILE_PATH="$(mktemp "$PROFILES_HOME"/$(uuidgen).mobileprovision)"
            echo ${FCI_PROVISIONING_PROFILE} | base64 --decode > $PROFILE_PATH
            echo "Saved provisioning profile $PROFILE_PATH"
        - name: Add signing certificate to keychain
          script: |
            echo $FCI_CERTIFICATE | base64 --decode > /tmp/certificate.p12
            keychain add-certificates --certificate /tmp/certificate.p12 --certificate-password $FCI_CERTIFICATE_PASSWORD
        - name: Increment build number
          script: |
            # increment build number
            #!/bin/sh
            set -e
            set -x
            cd $FCI_BUILD_DIR
            # agvtool new-version -all $(($BUILD_NUMBER +1))
            agvtool new-version -all $(($(app-store-connect get-latest-testflight-build-number "$APP_STORE_APP_ID") + 1))
        - name: Set up code signing settings on Xcode project
          script: |
            xcode-project use-profiles
        - name: Build .ipa
          script: |
            xcode-project build-ipa --workspace "$XCODE_WORKSPACE" --scheme "$XCODE_SCHEME"
      artifacts:
        - build/ios/ipa/*.ipa
        - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
      publishing:
        email:
            recipients:
              - saranjith.krishnan@cred.club
            notify:
              success: true
              failure: true
        app_store_connect:   # https://docs.codemagic.io/publishing-yaml/distribution
            api_key: $APP_STORE_CONNECT_PRIVATE_KEY         # Contents of the API key, can also reference environment variable such as $APP_STORE_CONNECT_PRIVATE_KEY
            key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER       # Alphanumeric value that identifies the API key, can also reference environment variable such as $APP_STORE_CONNECT_KEY_IDENTIFIER
            issuer_id: $APP_STORE_CONNECT_ISSUER_ID         # Alphanumeric value that identifies who created the API key, can also reference environment variable such as $APP_STORE_CONNECT_ISSUER_ID
            submit_to_testflight: false                     # Optional boolean, defaults to false. Whether or not to submit the uploaded build to TestFlight beta review. Required for distributing to beta groups. Note: This action is performed during post-processing.
            # beta_groups:                                  # Specify the names of beta tester groups that will get access to the build once it has passed beta review.
            #       - group name 1
            #       - group name 2
